# only points from T4b
cor <- cor[cor@data$elevation > 2600,]
cor@data
transects_top
names(cor@data$Name)
names(cor@data)
names(transects_top@data)
#
names(cor@data) <- c("trap", "elevation", "latlon")
cor@data$trap <- "T4b"
cor@data$trap
cor@data$transect <- "T4b"
cor@data$trap
cor
head(cor)
cor <-
read.csv(input_coor)
sp::coordinates(cor) <- ~X+Y
crs(cor) <- crs(bor)
cor <- crop(cor, trusmadi)
#add to names correct names
cor@data$Name[grep(pattern = "^Lat", x = cor@data$description, invert = T)] <-
grep(pattern = "^Lat", x = cor@data$description, invert = T, value = T)
cor@data <- select(cor@data, 1)
#remove waypoints not useful
cor@data$Name <- sub("12", "t1b-12", cor@data$Name)
rmwp <- c("2000", "F7", "F1", as.character(25:27), "1200",
"15", "500", "100", "2100", "GIBBON CABIN", "TALIBAN POINT", "RADIO ST ",
"TRUS MADI PEAK", "t1b-12")
cor <- cor[-which(cor@data$Name %in% rmwp), ]
#correct typos in waypoints
cor@data$Name <- stringr::str_replace(pull(cor@data), "([0-9][0-9])1", "\\1")
#for transects 1b, 2b and 3b, interpolate coordiates
transects_top <-
c(1:3) %>%
lapply(function(x){
from <- which(cor@data$Name == paste0("T", x, "B-1"))
to <- grep(pattern = paste0("T", x, "B-", "[0-9][0-9]"), x = cor@data$Name)
trap <- 1:as.numeric(stringr::str_extract(cor@data$Name[to], "[0-9][0-9]"))
lat_step <- (cor@coords[to, 2] - cor@coords[from, 2]) / (length(trap) - 1)
lon_step <- (cor@coords[to, 1] - cor@coords[from, 1]) / (length(trap) - 1)
lat <- as.numeric()
lon <- as.numeric()
for (i in 1:length(trap)) {lon[i] <- cor@coords[from, 1] - lon_step * (1-i)}
for (i in 1:length(trap)) {lat[i] <- cor@coords[from, 2] - lat_step * (1-i)}
data.frame("transect" = rep(paste0("T", x, "b"), length(trap)),
"trap" = trap,
"lat" = lat,
"lon" = lon)
}) %>%
do.call(what = rbind)
coordinates(transects_top) <- ~lon+lat
crs(transects_top) <- crs(cor)
#add elevation
transects_top@data$elevation <- raster::extract(bor, transects_top)
#
transects_top@data$latlon <-
paste0(round(transects_top@coords[, 2], 5), " N ", round(transects_top@coords[, 1], 5), " E")
#extract elevation
cor@data$elevation <- raster::extract(bor, cor)
#add lat lon ncbi format
cor@data$latlon <- paste0(round(cor@coords[, 2], 5), " N ", round(cor@coords[, 1], 5), " E")
#filter cor
# only points from T4b
cor <- cor[cor@data$elevation > 2600,]
#
names(cor@data) <- c("trap", "elevation", "latlon")
cor@data$transect <- "T4b"
head(cor)
cor@data$trap
cor@data$trap <- gsub(pattern = "T4B-1", replacement = "1", cor@data$trap )
rmwp <- c("2000", "F7", "F1", as.character(25:27), "1200",
"15", "500", "100", "2100", "GIBBON CABIN", "TALIBAN POINT", "RADIO STtr",
"TRUS MADI PEAK", "t1b-12")
rmwp <- c("2000", "F7", "F1", as.character(25:27), "1200",
"15", "500", "100", "2100", "GIBBON CABIN", "TALIBAN POINT", "RADIO ST",
"TRUS MADI PEAK", "t1b-12")
cor <- cor[-which(cor@data$Name %in% rmwp), ]
cor
rm(list=ls())
trusmadi <- extent(c(116.501, 116.53), y = c(5.54, 5.5575))
bor <-
raster::raster(input_raster) %>%
raster::crop(extent(x = c(116.2, 116.8), y = c(5.4, 5.95)))
tm <- raster::crop(bor, trusmadi)
plot(tm)
points(cor, pch = 16, col = "blue")
#read coordinates
cor <-
read.csv(input_coor)
sp::coordinates(cor) <- ~X+Y
crs(cor) <- crs(bor)
cor <- crop(cor, trusmadi)
#add to names correct names
cor@data$Name[grep(pattern = "^Lat", x = cor@data$description, invert = T)] <-
grep(pattern = "^Lat", x = cor@data$description, invert = T, value = T)
cor@data <- select(cor@data, 1)
#remove waypoints not useful
cor@data$Name <- sub("12", "t1b-12", cor@data$Name)
rmwp <- c("2000", "F7", "F1", as.character(25:27), "1200",
"15", "500", "100", "2100", "GIBBON CABIN", "TALIBAN POINT", "RADIO ST",
"TRUS MADI PEAK", "t1b-12")
cor <- cor[-which(cor@data$Name %in% rmwp), ]
#correct typos in waypoints
cor@data$Name <- stringr::str_replace(pull(cor@data), "([0-9][0-9])1", "\\1")
#for transects 1b, 2b and 3b, interpolate coordiates
transects_top <-
c(1:3) %>%
lapply(function(x){
from <- which(cor@data$Name == paste0("T", x, "B-1"))
to <- grep(pattern = paste0("T", x, "B-", "[0-9][0-9]"), x = cor@data$Name)
trap <- 1:as.numeric(stringr::str_extract(cor@data$Name[to], "[0-9][0-9]"))
lat_step <- (cor@coords[to, 2] - cor@coords[from, 2]) / (length(trap) - 1)
lon_step <- (cor@coords[to, 1] - cor@coords[from, 1]) / (length(trap) - 1)
lat <- as.numeric()
lon <- as.numeric()
for (i in 1:length(trap)) {lon[i] <- cor@coords[from, 1] - lon_step * (1-i)}
for (i in 1:length(trap)) {lat[i] <- cor@coords[from, 2] - lat_step * (1-i)}
data.frame("transect" = rep(paste0("T", x, "b"), length(trap)),
"trap" = trap,
"lat" = lat,
"lon" = lon)
}) %>%
do.call(what = rbind)
coordinates(transects_top) <- ~lon+lat
crs(transects_top) <- crs(cor)
#add elevation
transects_top@data$elevation <- raster::extract(bor, transects_top)
#
transects_top@data$latlon <-
paste0(round(transects_top@coords[, 2], 5), " N ", round(transects_top@coords[, 1], 5), " E")
#extract elevation
cor@data$elevation <- raster::extract(bor, cor)
#add lat lon ncbi format
cor@data$latlon <- paste0(round(cor@coords[, 2], 5), " N ", round(cor@coords[, 1], 5), " E")
#filter cor
# only points from T4b
cor <- cor[cor@data$elevation > 2600,]
#
names(cor@data) <- c("trap", "elevation", "latlon")
cor@data$transect <- "T4b"
cor@data$trap
cor@data$trap <- gsub(pattern = "T4B-1", replacement = "1", cor@data$trap )
rm(list=ls())
input_raster <- "/Users/miguelcamacho/Dropbox/Mi Mac (MacBook-Pro-de-mike.local)/Documents/GIS_resources/n05_e116_1arc_v3.tif"
input_coor <- "/Users/miguelcamacho/Dropbox/research/projects/rattus-baluensis-trusmadi/etc/coord.csv"
#read raster
trusmadi <- extent(c(116.501, 116.53), y = c(5.54, 5.5575))
bor <-
raster::raster(input_raster) %>%
raster::crop(extent(x = c(116.2, 116.8), y = c(5.4, 5.95)))
tm <- raster::crop(bor, trusmadi)
plot(tm)
points(cor, pch = 16, col = "blue")
cor <-
read.csv(input_coor)
sp::coordinates(cor) <- ~X+Y
crs(cor) <- crs(bor)
cor <- crop(cor, trusmadi)
#add to names correct names
cor@data$Name[grep(pattern = "^Lat", x = cor@data$description, invert = T)] <-
grep(pattern = "^Lat", x = cor@data$description, invert = T, value = T)
cor@data <- select(cor@data, 1)
#remove waypoints not useful
cor@data$Name <- sub("12", "t1b-12", cor@data$Name)
rmwp <- c("2000", "F7", "F1", as.character(25:27), "1200",
"15", "500", "100", "2100", "GIBBON CABIN", "TALIBAN POINT", "RADIO ST",
"TRUS MADI PEAK", "t1b-12")
cor <- cor[-which(cor@data$Name %in% rmwp), ]
#correct typos in waypoints
cor@data$Name <- stringr::str_replace(pull(cor@data), "([0-9][0-9])1", "\\1")
#for transects 1b, 2b and 3b, interpolate coordiates
transects_top <-
c(1:3) %>%
lapply(function(x){
from <- which(cor@data$Name == paste0("T", x, "B-1"))
to <- grep(pattern = paste0("T", x, "B-", "[0-9][0-9]"), x = cor@data$Name)
trap <- 1:as.numeric(stringr::str_extract(cor@data$Name[to], "[0-9][0-9]"))
lat_step <- (cor@coords[to, 2] - cor@coords[from, 2]) / (length(trap) - 1)
lon_step <- (cor@coords[to, 1] - cor@coords[from, 1]) / (length(trap) - 1)
lat <- as.numeric()
lon <- as.numeric()
for (i in 1:length(trap)) {lon[i] <- cor@coords[from, 1] - lon_step * (1-i)}
for (i in 1:length(trap)) {lat[i] <- cor@coords[from, 2] - lat_step * (1-i)}
data.frame("transect" = rep(paste0("T", x, "b"), length(trap)),
"trap" = trap,
"lat" = lat,
"lon" = lon)
}) %>%
do.call(what = rbind)
coordinates(transects_top) <- ~lon+lat
crs(transects_top) <- crs(cor)
#add elevation
transects_top@data$elevation <- raster::extract(bor, transects_top)
#
transects_top@data$latlon <-
paste0(round(transects_top@coords[, 2], 5), " N ", round(transects_top@coords[, 1], 5), " E")
#extract elevation
cor@data$elevation <- raster::extract(bor, cor)
#add lat lon ncbi format
cor@data$latlon <- paste0(round(cor@coords[, 2], 5), " N ", round(cor@coords[, 1], 5), " E")
#filter cor
# only points from T4b
cor <- cor[cor@data$elevation > 2600,]
#
# fix names traps
names(cor@data) <- c("trap", "elevation", "latlon")
cor@data$transect <- "T4b"
cor@data$trap
cor@data$trap <- gsub(pattern = "T4B-1", replacement = "1", cor@data$trap )
cor@data$trap
rbind(cor@data, transects_top@data)
rbind(cor@data, transects_top@data) %>% dplyr::arrange(transect, trap)
alltraps <- rbind(cor@data, transects_top@data) %>% dplyr::arrange(transect, trap)
#write csv
write.csv(x = alltraps,
file = "/Users/miguelcamacho/Dropbox/research/projects/rattus-baluensis-trusmadi/etc/alltraps.csv")
##READ data Rattus baluensis
rbal <- read.csv("/Users/miguelcamacho/Dropbox/research/projects/rattus-baluensis-trusmadi/etc/rbal-traps.csv")
rbal
##READ data Rattus baluensis
rbal <- read.csv("/Users/miguelcamacho/Dropbox/research/projects/rattus-baluensis-trusmadi/etc/rbal-traps.csv")
dplyr::left_join(rbal, alltraps, by = c("transect", "trap"))
cor@data
##READ data Rattus baluensis
rbal <-
read.csv("/Users/miguelcamacho/Dropbox/research/projects/rattus-baluensis-trusmadi/etc/rbal-traps.csv") %>%
dplyr::mutate(transect = paste0("T", transect))
dplyr::left_join(rbal, alltraps, by = c("transect", "trap"))
##READ data Rattus baluensis
rbal <-
read.csv("/Users/miguelcamacho/Dropbox/research/projects/rattus-baluensis-trusmadi/etc/rbal-traps.csv") %>%
dplyr::mutate(transect = paste0("T", transect))
dplyr::left_join(rbal, alltraps, by = c("transect", "trap"))
alltraps
jointdata <- dplyr::left_join(rbal, alltraps, by = c("transect", "trap"))
write.csv(jointdata, "/Users/miguelcamacho/Dropbox/research/projects/rattus-baluensis-trusmadi/etc/rbal-metadata.csv")
write.csv(jointdata, "/Users/miguelcamacho/Dropbox/research/projects/rattus-baluensis-trusmadi/etc/rbal-metadata.csv", row.names = F)
jointdata
rbal
rbal %>% arrange(id)
rbal %>% arrange(id) %>% pull(id) %>% duplicated()
dplyr::left_join(rbal, alltraps, by = c("transect", "trap"))
alltraps
ggplot(as.data.frame(cor@coords), aes(x = X, y = Y, label = cor@data$Name)) +
geom_point() +
ggrepel::geom_text_repel()
ggplot(as.data.frame(cor@coords), aes(x = X, y = Y, label = cor@data$Name)) +
geom_point() +
ggrepel::geom_text_repel()
cor@coords
cor@data$Name
cor@data
ggplot(as.data.frame(cor@coords), aes(x = X, y = Y, label = cor@data$trap)) +
geom_point() +
ggrepel::geom_text_repel()
alltraps
cor@data
duplicated(cor@data$trap)
cor@data$trap[duplicated(cor@data$trap)]
#remove duplicated traps (I checked them and they are very close)
!cor@data$trap[duplicated(cor@data$trap)]
#remove duplicated traps (I checked them and they are very close)
!(cor@data$trap[duplicated(cor@data$trap)])
#remove duplicated traps (I checked them and they are very close)
!(cor@data$trap[duplicated(cor@data$trap)])
#remove duplicated traps (I checked them and they are very close)
cor@data$trap[duplicated(cor@data$trap)]
#remove duplicated traps (I checked them and they are very close)
cor[-cor@data$trap[duplicated(cor@data$trap), ]
#remove duplicated traps (I checked them and they are very close)
cor[-cor@data$trap[duplicated(cor@data$trap)], ]
-cor@data$trap[duplicated(cor@data$trap)]
cor@data$trap[duplicated(cor@data$trap)]
-cor@data$trap[duplicated(cor@data$trap)]
-c(cor@data$trap[duplicated(cor@data$trap)])
cor@data$trap[duplicated(cor@data$trap)]
duplicated(cor@data$trap)
which(duplicated(cor@data$trap))
-which(duplicated(cor@data$trap))
#remove duplicated traps (I checked them and they are very close)
cor[-which(duplicated(cor@data$trap)), ]
#remove duplicated traps (I checked them and they are very close)
cor <- cor[-which(duplicated(cor@data$trap)), ]
cor@data
alltraps <-
rbind(cor@data, transects_top@data) %>%
dplyr::arrange(transect, trap)
jointdata <- dplyr::left_join(rbal, alltraps, by = c("transect", "trap"))
write.csv(jointdata, "/Users/miguelcamacho/Dropbox/research/projects/rattus-baluensis-trusmadi/etc/rbal-metadata.csv", row.names = F)
alltraps
bor
cor <-
read.csv(input_coor)
sp::coordinates(cor) <- ~X+Y
crs(cor) <- crs(bor)
cor@data
h <- cor[74,]
h
raster::extract(bor,h)
h@data
library(rentrez)
library(dplyr)
rentrez::entrez_search("nucleotide")
?rentrez::entrez_search("nucleotide")
rentrez::entrez_dbs()
rentrez::entrez_search("nucleotide", term = "eliomys")
eliom <- rentrez::entrez_search("nucleotide", term = "eliomys")
rentrez::entrez_fetch(eliom)
rentrez::entrez_fetch(db = "nucleotide", id = eliom)
rentrez::entrez_fetch(db = "nucleotide", id = eliom, rettype = "xml")
rentrez::entrez_fetch?rentrez::entrez_fetch
?rentrez::entrez_fetch
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "xml")
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "fasta")
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "xml")
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "native")
eliom <- rentrez::entrez_search("nucleotide", term = "eliomys cytb")
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "native")
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "fasta")
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "xml")
setwd("/Users/miguelcamacho/Downloads/")
sink("test.txt")
sink()
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "native")
+
sink()
sink("test.txt")
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "native")
sink()
eliom
eliom$retmax
eliom$file
eliom <- rentrez::entrez_search("nucleotide", term = "eliomys cytb", retmode = "xml")
eliom
eliom$ids
eliom <- rentrez::entrez_search("nucleotide", term = "eliomys cytb", retmode = "xml", retmax = 1000)
eliom
eliom$ids
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "xml")
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "gbc")
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "native", parsed = T)
library(XML)
eliom_fetch <- rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "native", parsed = T)
xmlParse(eliom_fetch)
eliom_fetch <- rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids, rettype = "native", parsed = T)
xmlParse(eliom_fetch)
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids,
rettype = "native", parsed = T)
eliom_fetch
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids,
rettype = "native")
eliom_fetch
xmlParse(eliom_fetch)
xmlToDataFrame(eliom_fetch)
xmlToDataFrame(eliom_fetch)
eliom_fetch
XML::xmlParse(eliom_fetch)
XML::xmlParse(eliom_fetch) %>% xmlToDataFrame()
sink("test.xml")
XML::xmlParse(eliom_fetch)
sink()
XML::xmlParse(eliom_fetch)
?XML::xmlParse
eliom_fetch
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids,
rettype = "native", parsed = T)
sink("test.xml")
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids,
rettype = "native")
eliom_fetc
sink()
eliom_fetc
eliom_fetch
XML::saveXML(eliom_fetch, file = "test.xml")
?XML::saveXML
eliom_fetch
XML::xmlParse(eliom_fetch) %>%
XML::saveXML(file = "test.xml")
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids,
rettype = "fasta")
eliom_fetch
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids,
rettype = "xml", parsed = T)
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids[1],
rettype = "xml", parsed = T)
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids[1],
rettype = "xml", parsed = T)
eliom$ids[1]
rentrez::entrez_fetch(db = "nuccore", id = eliom$ids[1],
rettype = "xml", parsed = T)
rentrez::entrez_fetch(db = "nuccore", id = eliom$ids[1],
rettype = "native", parsed = T)
rentrez::entrez_fetch(db = "nuccore", id = eliom$ids[1],
rettype = "fasta", parsed = T)
rentrez::entrez_fetch(db = "nuccore", id = eliom$ids[1],
rettype = "fasta")
?stringwrap
eliom_fetch
write(all_recs, file = "my_transcripts.fasta")
write(eliom_fetch, file = "my_transcripts.fasta")
trimal -in Downloads/temp2.fasta -out Downloads/eliomys.filt.fasta -htmlout Downloads/eliomys.filt.html -nogaps
eliom <- rentrez::entrez_search("nucleotide", term = "eliomys quercinus cytb", retmode = "xml", retmax = 1000)
eliom
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids,
rettype = "fasta")
write(eliom_fetch, file = "eliomys_cytb.fasta")
eliom <- rentrez::entrez_search("nucleotide", term = "eliomys quercinus cytochrome b", retmode = "xml", retmax = 1000)
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide", id = eliom$ids,
rettype = "fasta")
write(eliom_fetch, file = "eliomys_cytb.fasta")
eliom
eliom[1]
eliom$file
eliom
eliom$ids
str(eliom)
eliom_fetch
eliom$ids
eliom$ids[-1]
eliom$ids[which(eliom$ids != "4127830")]
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide",
id = eliom$ids[which(eliom$ids != "4127830")],
rettype = "fasta")
eliom_fetch
write(eliom_fetch, file = "eliomys_cytb.fasta")
eliom_fetch
eliom$ids
sort(eliom$ids)
#vector with E. melanurus. To remove:
emela <- c("372285226", "372285228", "372285230", "372285232", "4127830")
which(eliom$ids != "4127830")
which(eliom$ids != "4127830asd")
which(eliom$ids != "emela")
which(eliom$ids %in% "emela")
which(eliom$ids %in% emela)
which(eliom$ids != emela)
ids <- eliom$ids[-which(eliom$ids %in% emela)]
ids
eliom$ids
setwd(/Users/miguelcamacho/Dropbox/research/projects/eliomys)
setwd("/Users/miguelcamacho/Dropbox/research/projects/eliomys")
rm(list=ls())
library(rentrez)
#retrieve ids from genbank with eliomys cytb
eliom <- rentrez::entrez_search("nucleotide",
term = "eliomys quercinus cytochrome b",
retmode = "xml", retmax = 1000)
#vector with E. melanurus. To remove:
emela <- c("372285226", "372285228", "372285230", "372285232", "4127830")
ids <- eliom$ids[-which(eliom$ids %in% emela)]
#fetch fasta sequences
eliom_fetch <-
rentrez::entrez_fetch(db = "nucleotide",
id = ids,
rettype = "fasta")
#write fasta
write(eliom_fetch, file = "data/intermediate/eliomys_cytb.fasta")
rm(list=ls())
meta <- data.frame(
stringsAsFactors = FALSE,
sample = c("AJ225030","FM164278","FR848957",
"FR848958","GQ453668","GQ453669","HE611090","HE611091",
"HE611092","HE611093","HE613976","HE613977","HE613978",
"HE613979","HE613980","HE613981","HE613982","HE613983",
"HE613985","HE613986","HE613987","HE613988",
"HE613989","HE613990","HE613991","HE613992","HE613993",
"HE613994","HE613995","HE613996","HE613997","HE613998",
"HE613999","HE614000","HE614001","HE614002","HE614003",
"HE614004","HE614005","HE614006","HE614007",
"HE614008","JX457812","JX457813","JX457814","JX457815",
"JX457816"),
country = c("na", "belgium","na","na","italy",
"italy","france","france","france","france",
"france","france","italy","italy","italy","italy","italy",
"italy","france","france","france","france",
"france","Iberia","Iberia","Iberia","Iberia","croatia",
"italy","italy","italy","italy","italy","italy",
"italy","austria","belgium","belgium","france","france",
"france","germany","Iberia","Iberia","Iberia",
"Iberia","Iberia")
)
reshape2::dcast(meta, sample ~ country)
reshape2::dcast(meta, sample ~ country, fun.aggregate = "sum")
reshape2::dcast(meta, sample ~ country, fun.aggregate = sum)
table(meta
)
table(meta) %>% as.data.frame
h <-
table(meta)
str(h)
as.matrix(h)
h <- as.matrix(h)
h
str(h)
data.frame(h)
data.frame(h, drop = F)
data.frame(h, drop = T)
as.data.frame.matrix(h)
table(meta) %>% as.data.frame.matrix()
table(meta) %>% as.data.frame.matrix() %>%
write.csv(file = "data/raw/traitblock", sep = ",", quote = F)
